'use strict';

var fs = global.fs = global.fs || require('fs');
var common = global.config = global.config || require('../utils/common.js');
var config = common.config();

// Generate theme files
function generateThemes(themes) {
    var comp = config.styleDependency;
    if (comp === 'none') {
        return;
    }
    for (var i = 0; i < themes.length; i++) {
        var content = '',
            root = '',
            component;
        var baseContent = '';
        if (!config.isThirdParty && common.currentPackage !== 'ej2-base') {
            baseContent = '@import \'ej2-base/styles/' + themes[i] + '-definition.scss\';\n';
        }
        if (!comp.length || common.currentPackage === 'ej2-base') {
             content = baseContent;
            if (common.currentPackage === 'ej2-base') {
                if(themes[i].indexOf('-dark') !== -1 || themes[i].indexOf('-light') !== -1) {
                    content = '@import \'ej2-icons/styles/' + themes[i].split('-')[0] + '.scss\';\n';
                }
                else {
                    content = '@import \'ej2-icons/styles/' + themes[i] + '.scss\';\n';
                }
            } 
            createThemeFile(themes[i], content);
        } else {
            content = comp.toString() === 'ej2' ? '' : baseContent;
            for (var j = 0; j < comp.length; j++) {
                component = Object.keys(comp[j])[0];
                var addDarkTheme = ['tailwind-dark', 'bootstrap5-dark'];
                if (addDarkTheme.indexOf(themes[i]) !== -1) {
                    if (!fs.existsSync('./styles/' + component + '/_' + themes[i] +'-definition.scss') &&
                    fs.existsSync('./styles/' + component + '/_'+ addDarkTheme[addDarkTheme.indexOf(themes[i])].split('-')[0] + '-definition.scss')) {
                        var addLightTheme = `@import './` + addDarkTheme[addDarkTheme.indexOf(themes[i])].split('-')[0] + `-definition.scss';\n`;
                        fs.writeFileSync('./styles/' + component + '/_' + themes[i] + '-definition.scss', addLightTheme);
                    }
                    if (!fs.existsSync('./styles/' + component + '/icons/_' + themes[i] + '.scss') && 
                    fs.existsSync('./styles/' + component + '/icons/_' + addDarkTheme[addDarkTheme.indexOf(themes[i])].split('-')[0] + '.scss')) {
                        var addLightIcons = `@import './` + addDarkTheme[addDarkTheme.indexOf(themes[i])].split('-')[0] + `.scss';\n`;
                        fs.writeFileSync('./styles/' + component + '/icons/_' + themes[i] + '.scss', addLightIcons);
                    }
                }
                if (config.isThirdParty || fs.existsSync('./styles/' + component + '/_' + themes[i] + '-definition.scss')  || component === 'sortable') {
                    if (typeof comp[j] === 'string') {
                        if (fs.existsSync('./styles/' + component + '_definition.scss')) {
                            content = content + getImportStatement(comp[j], themes[i]);
                            if (j === comp.length - 1) {
                                createThemeFile(themes[i], content);
                            }
                        }
                    } else {
                        content = baseContent;
                        component = Object.keys(comp[j])[0];
                        root = root + '@import \'' + component + '/' + themes[i] + '.scss\';\n';
                        content = content + getComponentStyles(comp[j][component], themes[i]);
                        createThemeFile(themes[i], content, component);
                    }
                }
            }
            createThemeFile(themes[i], root, component, true);
        }
    }
}
exports.generateThemes = generateThemes;

// Create theme files based on folder structure
function createThemeFile(themeName, content, component, isRoot) {
    //if (content.length)
    var control = (component && !isRoot) ? component + '/' : '';
    if (common.currentRepo !== 'ej2-samples' && !(new RegExp(config.thirdPartyWords.join('|')).test(common.currentRepo))) {
        content = content + getThemeStyles(themeName, control);
        content = !isRoot ? content + '@import \'all.scss\';\n' : content;
    }
    writeFile('./styles/' + control + themeName + '.scss', content);
    //}
}
exports.createThemeFile = createThemeFile;

// Get inner level folder styles
function getComponentStyles(dependent, theme) {
    var content = '';
    for (var i = 0; i < dependent.length; i++) {
        content = content + getImportStatement(dependent[i], theme);
    }
    return content;
}
exports.getComponentStyles = getComponentStyles;

// Get import statement from component and theme name
function getImportStatement(comp, theme) {
    var statement = '';
    var styles = 'styles/';
    var splitted = comp.split('/');
    if (comp === 'ej2') {
        statement = '@import \'' + comp + '/' + theme + '.scss\';\n';
    }
    if (config.isThirdParty) {
        statement = '@import \'' + splitted[0] + '/' + styles + splitted[1] + '/' + theme + '.scss\';\n';
    } else if (comp.indexOf('../') !== -1 && fs.existsSync(comp.replace('../', 'styles/') + '/_' + theme + '-definition.scss')) {
        statement = '@import \'' + comp + '/' + theme + '-definition.scss\';\n';
    } else if (comp.indexOf('/') !== -1) {
        if (fs.existsSync('./node_modules/@syncfusion/' + splitted[0] + '/' + styles + splitted[1] + '/_' + theme + '-definition.scss')) {
            statement = '@import \'' + splitted[0] + '/' + styles + splitted[1] + '/' + theme + '-definition.scss\';\n';
        }
    } else if (fs.existsSync(comp + '/' + styles + '_' + theme + '-definition.scss')) {
        statement = '@import \'' + comp + '/' + styles + theme + '-definition.scss\';\n';
    }
    return statement;
}
exports.getImportStatement = getImportStatement;

// Get additional styles for component's theme
function getThemeStyles(themeName, control) {
    var themeStyles = '';
    var themeFile = themeName + '-definition.scss';
    if (fs.existsSync('./styles/' + control + '_definition.scss')) {
        var themeDefinition = '';
        if (fs.existsSync('./styles/' + control + '_' + themeFile)) {
            themeDefinition = fs.readFileSync('./styles/' + control + '_' + themeFile, 'utf8');
        }
    }

    if (fs.existsSync('./styles/' + control + '_' + themeFile)) {
        themeStyles = themeStyles + '@import \'' + themeFile + '\';\n';
    }
    if (fs.existsSync('./styles/' + control + 'icons/_' + themeName + '.scss')) {
        themeStyles = themeStyles + '@import \'icons/' + themeName + '.scss\';\n';
    }
    return themeStyles;
}

function writeFile(path, content) {
    var shelljs = global.shelljs = global.shelljs || require('shelljs');
    var arPath = path.split('/');
    arPath.pop();
    shelljs.mkdir('-p', arPath.join('/'));
    fs.writeFileSync(path, content, 'utf8');
}


exports.getThemeStyles = getThemeStyles;
