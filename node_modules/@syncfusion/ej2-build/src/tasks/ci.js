'use strict';

var gulp = global.gulp = global.gulp || require('gulp');
var common = global.config = global.config || require('../utils/common.js');
var runSequence = global.runSequence = global.runSequence || require('run-sequence');
var shelljs = require('shelljs');
var request = require('request');
var fs = require('fs');

/**
* ci report
*/
gulp.task('ci-report', function (done) {
    var jenkinUrl = process.env.JOB_URL.replace('jenkins.syncfusion.com',
        'SyncfusionBuild' + ':' + process.env.JENKINS_GITLAB_TOKEN + '@jenkins.syncfusion.com');
    shelljs.exec('curl GET ' + jenkinUrl + '/' + parseInt(process.env.BUILD_NUMBER) + '/api/json', { silent: true },
        function (err, result) {
            var res = JSON.parse(result);
            if (res.changeSets.length) {
                var causesDetails = [];
                var lastCommitDetails = [];
                for (var k = 0; k < res.changeSets.length; k++) {
                    if (res.changeSets[k].items.length) {
                        for (var i = 0; i < res.changeSets[k].items.length; i++) {
                            var index = getIndex(causesDetails, res.changeSets[k].items[i].author.fullName);
                            if (!causesDetails.length || index === -1) {
                                causesDetails.push({
                                    UserName: res.changeSets[k].items[i].author.fullName,
                                    UserID: res.changeSets[k].items[i].authorEmail
                                });
                                lastCommitDetails.push({
                                    author: res.changeSets[k].items[i].author.fullName,
                                    userID: res.changeSets[k].items[i].authorEmail,
                                    comments: res.changeSets[k].items[i].comment,
                                    files: res.changeSets[k].items[i].affectedPaths
                                });
                            }
                        }
                    }
                }
                var data = {
                    fullDisplayName: res.fullDisplayName,
                    'BuildType': 'Component',
                    'Timestamp': res.timestamp,
                    'Duration': res.duration,
                    Url: process.env.JOB_URL + res.number,
                    Number: res.number,
                    Reason: 'Build ' + process.argv[4],
                    Result: process.argv[4],
                    causes: causesDetails,
                    LastCommit: lastCommitDetails,
                };
                console.log('CI Report Data : ......\n\n' + JSON.stringify(data) + '\n\n........\n');
                request({
                    url: 'https://ej2services.syncfusion.com/cicentral/api/getCIHealthReport',
                    method: 'POST',
                    json: true,
                    body: data,
                    headers: {
                        'authorization': 'ej2centrailzedstatus',
                        'content-type': 'application/json'
                    }
                }, function () {
                    done();
                });
            }
            else {
                done();
            }
        }
    );
});

function getIndex(causesDetails, name) {
    var userNameIndex = causesDetails.findIndex(x => x.UserName === name);
    return userNameIndex;
}


/** 
 * pre-push hook gulp tasks
 */
gulp.task('pre-push', function (done) {
    runSequence('scripts', 'coverage', 'spell-check-ci', 'api-diff', done);
});

/** 
 * pre-commit hook gulp tasks
 */
gulp.task('pre-commit', ['lint']);

/** 
 * commit-msg hook gulp tasks
 */
gulp.task('commit-msg', ['commit-message']);

/** 
 * ci-compile gulp tasks
 */
gulp.task('ci-compile', ['styles-all']);

/** 
 * ci-test gulp tasks
 */
gulp.task('ci-test', function (done) {
    // shelljs.exec('gulp css-validation');
    runSequence('css-validation','changelog-validation', 'lint', 'pre-push', done);
});

/** 
 * list of release tasks
 */
gulp.task('release', function (done) {
    runSequence('release-scripts', 'umd-deploy', done);
});

/** 
 * ci-publish gulp tasks
 */
gulp.task('ci-publish', function (done) {
    var publish = common.isMasterBranch || common.isReleaseBranch || common.isHotfixBranch ? 'publish-production' : 'publish';
    var registry;
    if (common.isRemoteServer) {
        registry = common.isMasterBranch ? 'production-registry' : 'dev-registry';
        registry = common.isReleaseBranch ? 'release-registry' : registry;
        registry = common.isHotfixBranch ? 'hotfix-registry' : registry;
    } else {
        registry = common.isMasterBranch ? 'local-production-registry' : 'local-dev-registry';
    }
    runSequence('release', 'publish-changelog', publish, registry, 'publish-ej2', 'publish-resources',
        'publish-typedoc', 'publish-api', done);

});

/** 
 * ci-build-publish gulp tasks
 */
gulp.task('ci-build-publish', function () {
    if (common.isMasterBranch || common.isReleaseBranch || common.isHotfixBranch) {
        gulp.start('publish-production');
    } else {
        gulp.start('publish');
    }
});

gulp.task('complete-build', function () {
    var rollUp = 'node --max-old-space-size=8192 node_modules/gulp/bin/gulp.js';
    var buildScripts = 'gulp scripts && gulp ci-compile && gulp es-scripts && gulp esm-scripts && ' +
        'gulp umd-scripts && gulp global-scripts && gulp rm-temp && gulp npmignore && gulp license';

    if (!fs.existsSync('./src') && fs.existsSync('./styles')) {
        buildScripts = 'gulp ci-compile && gulp rm-temp && gulp npmignore && gulp license';
    }
    if (common.currentPackage === 'ej2') {
        buildScripts = 'gulp build && gulp ej2-js && gulp ship-ej2-es5 && gulp npmignore';
    }
    if (common.currentPackage === 'ej2-angular-base') {
        buildScripts = 'gulp schematics-build && gulp scripts && gulp ci-compile && gulp es-scripts && ' +
            rollUp + ' esm-scripts umd-scripts global-scripts && gulp rm-temp && gulp npmignore && gulp license';
    }
    var completeBuild = shelljs.exec(buildScripts, { silent: false });
    if (completeBuild.code !== 0) {
        process.exit(1);
    }
});

gulp.task('angular-complete-build', function () {
    var angularScripts = 'gulp angular-root-file && npm run scripts && gulp aot-scripts && gulp styles-all';
    var angularCompleteBuild = shelljs.exec(angularScripts, { silent: false });
    if (angularCompleteBuild.code !== 0) {
        process.exit(1);
    }

});

gulp.task('react-complete-build', function () {
    var reactScripts = 'gulp generate-root-files && gulp build ci-compile && gulp es5-scripts && ' +
        'gulp esm5-scripts && gulp umd-scripts && gulp rm-temp';
    var reactCompleteBuild = shelljs.exec(reactScripts, { silent: false });
    if (reactCompleteBuild.code !== 0) {
        process.exit(1);
    }
});

gulp.task('vue-complete-build', function () {
    var vueScripts = 'gulp build && gulp ci-compile && gulp es5-scripts && gulp esm5-scripts && gulp umd-scripts && gulp rm-temp';
    var vueCompleteBuild = shelljs.exec(vueScripts, { silent: false });
    if (vueCompleteBuild.code !== 0) {
        process.exit(1);
    }
});

gulp.task('build-output', function () {
    var fs = require('fs');
    var config = JSON.parse(fs.readFileSync('./config.json'));
    var samples = { 'typescript': 'TypeScript', 'javascript': 'JavaScript', 'angular': 'Angular', 'react': 'React', 'vue': 'Vue' };
    var configSrc = JSON.parse(fs.readFileSync(__dirname + '/../../config.json'));
    var publishSample = configSrc.publishSamples;
    gulp.src(publishSample)
        .pipe(gulp.dest(samples[config.platform]));
});
