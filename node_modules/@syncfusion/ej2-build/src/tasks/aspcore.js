'use strict';

var gulp = global.gulp = global.gulp || require('gulp');
var common = global.config = global.config || require('../utils/common.js');
var runSequence = global.runSequence = global.runSequence || require('run-sequence');
var fs = global.fs = global.fs || require('fs');
var shelljs = require('shelljs');

gulp.task('aspcore-checkout', function (done) {
    common.checkout('asp-core', 'asp-core', function () {
        var branchname = common.isMasterBranch ? 'master' : 'development';
        branchname = common.isReleaseBranch ? process.env.BRANCH_NAME : branchname;
        branchname = common.isHotfixBranch ? process.env.BRANCH_NAME : branchname;
        shelljs.cd('./third-party/asp-core/');
        shelljs.exec('git checkout ' + branchname);
        shelljs.cd('../../');
        done();
    });
});

gulp.task('aspcore-compile', function(done) {
    shelljs.cd('./third-party/asp-core/');
    shelljs.exec('npm install');
    var csProjFile = fs.readFileSync('./src/Syncfusion.EJ2.csproj','UTF8');
    var  itemGroupStr = csProjFile.match(/<ItemGroup Condition=([^]*)<\/ItemGroup>/)[0];
    itemGroupStr = itemGroupStr.slice(0, itemGroupStr.indexOf('</ItemGroup>') + '<ItemGroup>'.length + 1);
    csProjFile = csProjFile.replace(itemGroupStr,'').replace('net451;','');
    fs.writeFileSync('./src/Syncfusion.EJ2.csproj', csProjFile);
    //ASP Core Nuget
    shelljs.exec('dotnet restore "src/Syncfusion.EJ2.csproj"  --configfile "./src/NuGet.config"');
    shelljs.exec('gulp change-nuspec --nuspec "./src/Syncfusion.EJ2.AspNet.Core.nuspec"');
    shelljs.exec('dotnet build "src/Syncfusion.EJ2.csproj" --verbosity "m" --configuration  "Debug"', 
    function (exitCode) {
        shelljs.exec('git checkout -- src/Syncfusion.EJ2.csproj src/Syncfusion.EJ2.AspNet.Core.nuspec');
        shelljs.cd('../../');
        done();
        common.shellDone(exitCode);
    });
});

gulp.task('change-nuspec', function () {
    console.log(process.argv);
    var file = fs.readFileSync(process.argv[4], 'UTF8');
    file = file.replace(/Release-XML/g, 'Debug');
    fs.writeFileSync(process.argv[4], file);
});

gulp.task('clean', function() {
    shelljs.rm('-rf', './src/bin/');
    shelljs.rm('-rf', './src/obj/');
    shelljs.rm('-rf', './bin/');
});

gulp.task('aspcore-generate', function (done) {
    var aspSrcGen = require('../third-party/asp-core/src-generator.js');
    var propGen = require('../third-party/asp-core/property-reader');
    var propCollection = propGen(JSON.parse(fs.readFileSync('./public/api/file.json')));
    aspSrcGen(JSON.parse(fs.readFileSync('./third-party/config.json')), propCollection, done);
});

gulp.task('aspcore-build', function (done) {
    runSequence('aspcore-checkout', 'aspcore-generate', done);
    //runSequence('aspcore-checkout', 'aspcore-generate', 'aspcore-compile', done);
});
