'use strict';
var fs = global.fs = global.fs || require('fs');
var shelljs = require('shelljs');
var gulp = global.gulp = global.gulp || require('gulp');
global.config = global.config || require('../utils/common.js');

var print;
var common = global.config;
var config = global.config.config();
// var tsConfig = __dirname + config.tslintConfig;
var htmlConfig = __dirname + config.htmllintConfig;
var sassConfig = __dirname + config.sasslintConfig;
var mdlintConfig = __dirname + config.mdlintConfig;
var currentRepo = common.currentRepo;
var sampleList;

if (fs.existsSync('./controlWiseSample.json')) {
    sampleList = JSON.parse(fs.readFileSync('./controlWiseSample.json'));
}

/**
 * Lint source files using microsoft contributed tslint
 */

gulp.task('es-lint-config', function (done) {
    shelljs.exec('npm i tslint');
    shelljs.cp('-r',__dirname + '/../../tslint.json','./tslint.json');
    var packJson = JSON.parse(fs.readFileSync('./package.json','utf8'));
    packJson.scripts['es-lint-config'] = `npx tslint-to-eslint-config --config .eslintrc.json --tslint ./tslint.json`;
    packJson.scripts['es-lint'] = `eslint -c .eslintrc.json --ext .ts ./src/**`;
    /*jshint -W069 */
    if (packJson.dependencies['tslint']) {
        delete packJson.dependencies['tslint'];
    }
    /*jshint +W069 */
    fs.writeFileSync('./package.json', JSON.stringify(packJson, null,4), 'utf8');
    shelljs.exec('npm run es-lint-config');
    var eslintConfig = fs.readFileSync(__dirname + '/../../templates/eslint').toString();
    fs.writeFileSync('./.eslintrc.json', eslintConfig, 'utf8');
    done();
});

gulp.task('es-lint', function (done) {
    shelljs.exec('npm run es-lint');
    done();
});

/**
 * Lint scss files using gulp-sass-lint
 */
gulp.task('sass-lint', function () {
    print = print || require('gulp-print');
    var sasslint = require('gulp-sass-lint');
    var dir = './cireports/sasslint';
    if (!fs.existsSync(dir)) {
        shelljs.mkdir('-p', dir);
    }
    var file = fs.createWriteStream('./cireports/sasslint/'+currentRepo+'.SASSLintAnalysis.xml');
    return gulp.src(config.sasslint)
        .pipe(print())
        .pipe(sasslint({ configFile: sassConfig }))
        .pipe(sasslint.format())
        .pipe(sasslint.format(file))
        .pipe(sasslint.failOnError());
});

/**
 * Lint sample html files using html lint
 */
gulp.task('html-lint', function () {
    print = print || require('gulp-print');
    var htmllint = require('./htmllint.js');
    if (sampleList && sampleList.length && currentRepo === 'ej2-samples') {
        config.htmllint = getControlWisehtmllint();
    }
    return gulp.src(config.htmllint)
        .pipe(print())
        .pipe(htmllint(htmlConfig));
});

function getControlWisehtmllint() {
    var htmllintcontrols = JSON.parse(fs.readFileSync('./sampleList.json'));
    config.htmllint = [];
    for (var i = 0; i < htmllintcontrols.length; i++) {
        config.htmllint.push('./src/' + htmllintcontrols[i] + '/*.html');
    }
    return config.htmllint;
}

gulp.task('md-lint', ['typo', 'md-header'], function (done) {
    var markdownlint = require('markdownlint');
    var glob = require('glob');
    var options = {
        files: glob.sync('{./CHANGELOG.md,./third-party/changelog/*.md}'),
        config: require(mdlintConfig)
    };
    markdownlint(options, function (result, err) {
        if (err.toString().length) {
            console.error(err.toString());
            done();
            process.exit(1);
        } else {
            console.log('\n*** Markdown Lint Succeeded ***\n');
            done();
        }
    });
});
gulp.task('typo', function () {
    var shelljs = require('shelljs');
    var buildConfig = JSON.parse(fs.readFileSync('./node_modules/@syncfusion/ej2-build/config.json'));
    var compConfig = require(fs.realpathSync('./config.json'));
    var changelogTypo = buildConfig.changelogTypo;
    if (compConfig.changelogTypo) {
        changelogTypo = buildConfig.changelogTypo.concat(compConfig.changelogTypo);
    }
    fs.writeFileSync('./node_modules/.bin/.spelling', changelogTypo.join('\n'));
    // goto .bin location
    shelljs.cd('./node_modules/.bin/');
    // run mdspell command
    var mdspellcmd = 'mdspell ../../CHANGELOG.md ../../third-party/changelog/*.md -r -n -a -x --color';
    var output = shelljs.exec(mdspellcmd);
    // return root location
    shelljs.cd('../../');
    if (output.code !== 0) {
        console.error('\n** changelog file  have typo issues ***');
        process.exit(1);
    }
});


/**
 * Lint js files using jslint
 */
gulp.task('js-hint', ['dedupe'], function () {
    print = print || require('gulp-print');
    var jshint = require('gulp-jshint');
    var dir = './cireports/jslint';
    if (!fs.existsSync(dir)) {
        shelljs.mkdir('-p', dir);
    }
    var jshintXMLReporter = require('gulp-jshint-xml-file-reporter');
    return gulp.src(config.jshint)
        .pipe(print())
        .pipe(jshint())
        .pipe(jshint.reporter('default'))
        .pipe(jshint.reporter(jshintXMLReporter))
        .on('end', jshintXMLReporter.writeFile({
            format: 'checkstyle',
            filePath: './cireports/jslint/'+currentRepo+'.JSLintAnalysis.xml'
        }))
        .pipe(jshint.reporter('fail'));
});

gulp.task('lint', ['dedupe', 'es-lint-config', 'es-lint', 'sass-lint', 'md-lint', 'html-lint']);