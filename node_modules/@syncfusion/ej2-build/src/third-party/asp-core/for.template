using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Syncfusion.EJ2.{{BaseClass}};
#if EJ2_DNX
using System.Web.Mvc;
using System.Web.Mvc.Html;
using System.Web.Routing;
#endif
#if !EJ2_DNX
using Microsoft.AspNetCore.Razor.TagHelpers;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewFeatures.Internal;
using Microsoft.AspNetCore.Routing;
#endif

namespace Syncfusion.EJ2
{
    public static class {{className}}ForExtension
    {
        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression)
        {
            var model = new Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}}();
            return {{className}}For(factory, expression, model, null, null);
        }
        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}} model)
        {
            return {{className}}For(factory, expression, model, null, null);
        }

        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}} model, object objHtmlAttr)
        {
            return {{className}}For(factory, expression, model, objHtmlAttr, null);
        }

        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}} model, Dictionary<string, object> htmlAttributes)
        {
            return {{className}}For(factory, expression, model, null, htmlAttributes);
        }

        public static {{className}}Builder {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, object objHtmlAttr)
        {
            var model = new Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}}();
            return {{className}}For(factory, expression, model, objHtmlAttr, null);
        }
 
        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, Dictionary<string, object> htmlAttributes)
        {
            var model = new Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}}();
            return {{className}}For(factory, expression, model, null, htmlAttributes);
        }
        public static {{className}}Builder{{tModelObj}} {{className}}For<TModel, TProperty>(this EJ2For<TModel> factory, Expression<Func<TModel, TProperty>> expression, Syncfusion.EJ2.{{BaseClass}}.{{className}}{{tModelObj}} model, object objHtmlAttr, Dictionary<string, object> htmlAttributes)
        {
            InitiateEJSFor ForControl = new InitiateEJSFor();
#if EJ2_DNX
           string id = ForControl.GenerateIdFromName(factory.htmlHelper.ViewData.TemplateInfo.GetFullHtmlFieldId(ExpressionHelper.GetExpressionText(expression)));
#else
           string id = ForControl.GenerateIdFromName(ExpressionHelper.GetExpressionText(expression));           
#endif
            {{htmlAttrID}}
            //Creating {{className}} model
            var completeBuilder = new {{className}}Builder{{tModelObj}}(model);
            completeBuilder.Context = factory.Context;
#if EJ2_DNX
            if (!completeBuilder.Context.Items.Contains("ejsscriptManager"))
            {
                completeBuilder.Context.Items.Add("ejsscriptManager", new EJSScriptRenderContext());
            }
#endif
            var attrID = "";
            if (htmlAttributes!=null)
            {
                attrID = EJSUtil.GetHtmlId(htmlAttributes);
            }
            Dictionary<string, object> HtmlAttr;
            if (completeBuilder.model.GetType().GetProperty("HtmlAttributes") != null)
            {
                HtmlAttr = ForControl.GetHtmlAttributes((Dictionary<string, object>)completeBuilder.model.HtmlAttributes, new RouteValueDictionary(objHtmlAttr), htmlAttributes);
                HtmlAttr.Add("ejs-for", "true");
                if (HtmlAttr.Count != 0)
                {
                    completeBuilder.model.HtmlAttributes = HtmlAttr;
                }
            }
            else
            {
                HtmlAttr = ForControl.GetHtmlAttributes((Dictionary<string, object>)completeBuilder.HtmlAttr, new RouteValueDictionary(objHtmlAttr), htmlAttributes);
                HtmlAttr.Add("ejs-for", "true");
                if (HtmlAttr.Count != 0)
                {
                    completeBuilder.HtmlAttr = HtmlAttr;
                }
            }
            completeBuilder.ID = id;

            if (attrID != null && attrID != "")
            {
                 completeBuilder.model.Id = completeBuilder.ID = attrID;
            }
            else
            {
                 completeBuilder.model.Id = completeBuilder.ID = id {{modelID}};
            }

            if (HtmlAttr.ContainsKey("id") == false && HtmlAttr.ContainsKey("ID") == false )
            {
                HtmlAttr.Add("id", completeBuilder.model.Id);
            }

            if (completeBuilder.inputType.Length > 0)
            {
                HtmlAttr.Add("type", completeBuilder.inputType);
            }

#if EJ2_DNX
            completeBuilder.inputText = InputExtensions.TextBoxFor(factory.htmlHelper, expression, HtmlAttr).ToString();
#else
            completeBuilder.inputText = factory.htmlHelper.TextBoxFor(expression, HtmlAttr).ToString();
#endif

            {{htmlAttrBuilder}}
            object val = null;
            try
            {
                var modelValue = expression.Compile()(factory.htmlHelper.ViewData.Model);
                val = (object)modelValue;

#if EJ2_DNX
                if ((expression.ReturnType.IsArray || expression.ReturnType.IsGenericType) && val != null)
#else
                if (expression.ReturnType.IsArray && val != null)
#endif
                {
                    completeBuilder.inputText = completeBuilder.inputText.Replace(expression.ReturnType.ToString(), "");
                }
            }
            catch { }
            {{htmlAttrVal}}
            {{updateModelValue}}
            {{valProps}}
            return completeBuilder;
        }
}
}
