import { Directive, ViewContainerRef, ContentChildren{{queryChild}}{{templateRefImport}} } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
{{templateImport}}
{{queryImports}}

let input: string[] = [{{inputs}}];
let outputs: string[] = [{{outputs}}];
{{tagComment}}
@Directive({
    selector: '{{selector}}',
    inputs: input,
    outputs: outputs,    
    queries: {
{{query}}
    }
})
export class {{className}}Directive extends ComplexBase<{{className}}Directive> {
    public directivePropList: any;
{{outputsEvents}}
{{tagDef}}
{{tagStmt}}
{{propertyRef}}
{{templateProps}}
    constructor(private viewContainerRef:ViewContainerRef) {
        super();
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}

/**
 * {{className}} Array Directive
 * @private
 */
@Directive({
    selector: '{{arraySelector}}',
    queries: {
        children: new ContentChildren({{className}}Directive)
    },
})
export class {{arrClassName}}Directive extends ArrayBase<{{arrClassName}}Directive> {
    constructor() {
        super('{{property}}');
    }
}