import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider{{queryChild}}{{optionalImport}}{{templateRefImport}} } from '@angular/core';
import { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';
import { {{name}} } from '{{packagepath}}';
{{templateImport}}
{{queryImports}}

export const inputs: string[] = [{{inputs}}];
export const outputs: string[] = [{{outputs}}];
export const twoWays: string[] = [{{twoways}}];

{{componentComments}}
@Component({
    selector: '{{selector}}',
    inputs: inputs,
    outputs: outputs,
    template: `<ng-content {{SelectOption}}></ng-content>`,
    changeDetection: ChangeDetectionStrategy.OnPush,
    queries: {
{{query}}
    }
})
@ComponentMixins([ComponentBase])
export class {{name}}Component extends {{name}} implements IComponentBase {
    public containerContext : any;
    public tagObjects: any;
{{outputsEvents}}
{{tagDef}}
{{tagStmt}}
{{templateProps}}
    constructor(private ngEle: ElementRef, private srenderer: Renderer2, private viewContainerRef:ViewContainerRef, private injector: Injector) {
        super();
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
{{injectedModules}}
        this.registerEvents(outputs);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.containerContext  = new ComponentBase();
    }

    public ngOnInit() {
        this.containerContext.ngOnInit(this);
    }

    public ngAfterViewInit(): void {
        this.containerContext.ngAfterViewInit(this);
    }

    public ngOnDestroy(): void {
        this.containerContext.ngOnDestroy(this);
    }

    public ngAfterContentChecked(): void {
        {{tagObjInstance}}
        this.containerContext.ngAfterContentChecked(this);
    }

    public registerEvents: (eventList: string[]) => void;
    public addTwoWay: (propList: string[]) => void;
}

