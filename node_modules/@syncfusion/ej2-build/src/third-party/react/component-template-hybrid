import * as React from 'react';
import { {{baseClass}}, {{baseClass}}Model } from '{{packageName}}';
import { ComponentBaseHybrid, applyMixins, DefaultHtmlAttributes } from '@syncfusion/ej2-react-base';

{{controlAttributes}}
{{templateinterface}}
{{componentComments}}
export class {{baseClass}}Component extends {{baseClass}} {
    public state: Readonly<{ children?: React.ReactNode | React.ReactNode[] }> 
    & Readonly<{{baseClass}}Model & DefaultHtmlAttributes{{attributeInterface}}{{templateOverride}}>;
    public setState: any;{{attributemapper}}
    public initRenderCalled: boolean = false;
    public isReactHybrid: boolean = false;
    public isAppendCalled: boolean = false;
    public setstatecalled: boolean = false;
    private refreshChild: Function;
    private generateReactElements: Function;
    private checkInjectedModules: boolean = {{hasInjected}};{{directiveKeys}}
    public props: Readonly<{ children?: React.ReactNode | React.ReactNode[] }>
     & Readonly<{{baseClass}}Model & DefaultHtmlAttributes{{attributeInterface}}{{templateOverride}}>;
    public forceUpdate: (callBack?: () => any) => void;
    public context: Object;
    public isReactComponent: Object;
    public refs: {
        [key: string]: React.ReactInstance
    };

    constructor(props: any) {
        super(props);
    }

    public render(): any {
        if (this.isReactHybrid && !this.isAppendCalled && !this.setstatecalled ) {
            super.render();
            this.initRenderCalled = true;
        } else {
             if(!this.isReactHybrid){
                this.isReactHybrid = true;
                this.refreshChild(true);
                this.appendTo({
                    tagName: '{{tagName}}',
                    attributes: {
                        className: 'e-control',
                        id: this.props.id
                    },
                    children: []
                }as any);
                this.isAppendCalled = true;
            }          
            var renderer = this.generateReactElements(this.element)
            return (renderer);
        }
    }
}

applyMixins({{baseClass}}Component, [ComponentBaseHybrid, React.PureComponent]);
