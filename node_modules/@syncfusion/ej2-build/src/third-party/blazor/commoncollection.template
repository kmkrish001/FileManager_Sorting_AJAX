@using Syncfusion;
@using Newtonsoft.Json;
@using System.Reflection;
@using System.Collections;
@using Microsoft.JSInterop;
@using System.ComponentModel;
@using Newtonsoft.Json.Converters;
@using Microsoft.AspNetCore.Components;
@using Syncfusion.Blazor.{{namespace}};

@inherits BaseComponent;

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    private string _jsNamespace { get; set; } = "{{JSNamespace}}";

    protected override string jsProperty { get; set; } = string.Empty;

    [CascadingParameter]
    internal object dynamicParent { get; set; }

    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    public List<{{ComplexType}}> {{PropertyName}} { get; set; } = new List<{{ComplexType}}>();

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string  GetJSNamespace()
    {
        System.Type parentType = this.dynamicParent.GetType();
        MethodInfo methodInfo = parentType.GetMethod("GetJSNamespace");
        string parentJSNamespace = methodInfo.Invoke(this.dynamicParent, null).ToString();
        if (parentJSNamespace != string.Empty && !parentJSNamespace.StartsWith("sf"))
        {
            return parentJSNamespace + "." + this._jsNamespace;
        }
        else
        {
            return this._jsNamespace;
        }
    }

    internal int updateChildProperty({{ComplexType}} value)
    {
        this.{{PropertyName}}.Add(value);
        return this.{{PropertyName}}.Count() - 1;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.jsProperty = this.GetJSNamespace();
        System.Type parentType = this.dynamicParent.GetType();
        MethodInfo methodInfo = parentType.GetMethod("updateChildProperties");
        methodInfo?.Invoke(this.dynamicParent, new object[] { "{{JSNamespace}}", this.{{PropertyName}} });
    }
}