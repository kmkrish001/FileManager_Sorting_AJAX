@using System.IO;
@using Syncfusion;
@using Newtonsoft.Json;
@using Microsoft.JSInterop;
@using System.ComponentModel;
@using Syncfusion.Blazor;
@using System.Linq.Expressions;
@using Newtonsoft.Json.Converters;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Syncfusion.Blazor.Internal;
@using Syncfusion.Blazor.{{NameSpace}};
{{GenericType}}
@inherits {{BaseComponent}};
@implements {{Interface}};

<SyncfusionLicense></SyncfusionLicense>
<ResourceManager></ResourceManager>

{{Element}}

{{childs}}
@code {

    protected override string nameSpace { get; set; } = "{{JSNameSpace}}";
    protected override string jsProperty { get; set; } = string.Empty;

    [Parameter]
    public override string ID { get; set; }

    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }
    {{ModelType}}{{DataAnnotationAttributes}}
    {{Properties}}{{NativeEvent}}{{HtmlAttributes}}{{UpdateChildProperties}}

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string GetJSNamespace()
    {
        return this.nameSpace;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.jsProperty = this.GetJSNamespace();
        {{InitializeProperties}}
        if (this.ID == null)
        {
            string path = this.nameSpace.Split('.')[1] + System.IO.Path.GetRandomFileName().Replace(".", "");
            this.ID = path;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        {{SetParameterChanges}}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        {{AnnotationSettings}}
        await base.OnAfterRenderAsync(firstRender);
    }
}