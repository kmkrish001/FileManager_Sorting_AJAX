using System;
using Syncfusion;
using Newtonsoft.Json;
using System.Reflection;
using System.Collections;
using Syncfusion.Blazor;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Collections.Generic;
using Newtonsoft.Json.Converters;
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using Syncfusion.Blazor.{{namespace}};

namespace Syncfusion.Blazor.{{namespace}}
{
    public partial class {{CommonClassName}} : BaseComponent{{GenericInterface}}
    {
        private string _jsNamespace { get; set; } = string.Empty;
        private int _sfTagIndex { get; set; } = -1;

        protected override BaseComponent mainParent { get; set; }
        protected override string jsProperty { get; set; } = string.Empty;

        [CascadingParameter]
        internal object parent { get; set; }

        [CascadingParameter]
        internal {{BaseParentType}} baseParent { get; set; }

        {{Properties}}{{UpdateChildProperties}}
        [EditorBrowsable(EditorBrowsableState.Never)]
        public string GetJSNamespace()
        {
            System.Type parentType = this.parent.GetType();
            MethodInfo methodInfo = parentType.GetMethod("GetJSNamespace");
            string parentJSNamespace = methodInfo.Invoke(this.parent, null).ToString();
            if (this._sfTagIndex >= 0 && parentJSNamespace != string.Empty)
            {
                return parentJSNamespace + "[" + this._sfTagIndex + "]";
            }
            else if (parentJSNamespace != string.Empty && !parentJSNamespace.StartsWith("sf"))
            {
                return parentJSNamespace + "." + this._jsNamespace;
            }
            else
            {
                return this._jsNamespace;
            }
        }

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
            this.mainParent = (BaseComponent)this.baseParent;
            {{InitializeProperties}}
        }

        protected override async Task OnParametersSetAsync()
        {
            await base.OnParametersSetAsync();
            {{SetParameterChanges}}
        }

    }
}
