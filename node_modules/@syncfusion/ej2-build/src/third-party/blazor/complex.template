@using Syncfusion;
@using Newtonsoft.Json;
@using System.Reflection;
@using System.Collections;
@using Microsoft.JSInterop;
@using System.ComponentModel;
@using Syncfusion.Blazor;
@using System.Linq.Expressions;
@using Syncfusion.Blazor.{{namespace}};
@using Newtonsoft.Json.Converters;
@using Microsoft.AspNetCore.Components;
{{GenericType}}
@inherits BaseComponent;
@implements IDisposable;
{{Interface}}
<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

{{TemplateRender}}

@code {

    private string _jsNamespace = "{{JSNamespace}}";
    private int _sfTagIndex { get; set; } = -1;

    protected override BaseComponent mainParent { get; set; }
    protected override string jsProperty { get; set; } = string.Empty;

    [CascadingParameter]
    internal {{ParentType}} parent { get; set; }

    [CascadingParameter]
    internal {{BaseParentType}} baseParent { get; set; }

    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }
    {{DataAnnotationAttributes}}
    {{TemplateParameter}}

    {{Properties}}{{UpdateChildProperties}}{{InitComplexProperty}}

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string GetJSNamespace()
    {
        string parentJSNamespace = this.parent.GetJSNamespace();
        if (this._sfTagIndex >= 0 && parentJSNamespace != string.Empty)
        {
            return parentJSNamespace + "[" + this._sfTagIndex + "]";
        }
        else if (parentJSNamespace != string.Empty && !parentJSNamespace.StartsWith("sf"))
        {
            return parentJSNamespace + "." + this._jsNamespace;
        }
        else
        {
            return this._jsNamespace;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.mainParent = (BaseComponent)this.baseParent;{{OnInitContext}}
        this.jsProperty = this.GetJSNamespace();{{OnInitTemplate}}
        {{InitializeProperties}}
    }

    protected override async Task OnParametersSetAsync() 
    {
        await base.OnParametersSetAsync();{{InvokeEvents}}
        {{SetParameterChanges}}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        await base.OnAfterRenderAsync(firstRender);{{RenderTemplate}}
    }

    internal override void ComponentDispose()
    {
        this.mainParent = null;
        this.parent = null;
        this.baseParent = null;
        this.ChildContent = null;
        {{ComplexDispose}}
    }
}
