@using Syncfusion;
@using Newtonsoft.Json;
@using System.Reflection;
@using System.Collections;
@using Microsoft.JSInterop;
@using Syncfusion.Blazor;
@using System.ComponentModel;
@using Newtonsoft.Json.Converters;
@using Microsoft.AspNetCore.Components;
@using Syncfusion.Blazor.{{namespace}};

{{GenericType}}
@inherits {{CommonClassName}};

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

{{TemplateRender}}
@code {

    private int _sfTagIndex { get; set; } = -1;
    private string _jsNamespace { get; set; } = "{{JSNamespace}}";

    protected override string jsProperty { get; set; } = string.Empty;

    [CascadingParameter]
    internal object dynamicParent { get; set; }

    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }{{InitComplexProperty}}
    {{TemplateParameter}}
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    public new string GetJSNamespace()
    {
        System.Type parentType = this.dynamicParent.GetType();
        MethodInfo methodInfo = parentType.GetMethod("GetJSNamespace");
        string parentJSNamespace = methodInfo.Invoke(this.dynamicParent, null).ToString();
        if (this._sfTagIndex >= 0 && parentJSNamespace != string.Empty)
        {
            return parentJSNamespace + "[" + this._sfTagIndex + "]";
        }
        else if (parentJSNamespace != string.Empty && !parentJSNamespace.StartsWith("sf"))
        {
            return parentJSNamespace + "." + this._jsNamespace;
        }
        else
        {
            return this._jsNamespace;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        {{OnInitTemplate}}
        {{UpdateParentProperty}}
        this.jsProperty = this.GetJSNamespace();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        await base.OnAfterRenderAsync(firstRender);{{RenderTemplate}}
    }
}