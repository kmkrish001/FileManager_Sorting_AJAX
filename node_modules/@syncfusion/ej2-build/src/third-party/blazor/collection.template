@using Syncfusion;
@using Newtonsoft.Json;
@using System.Collections;
@using Microsoft.JSInterop;
@using System.ComponentModel;
@using Newtonsoft.Json.Converters;
@using Microsoft.AspNetCore.Components;
@using Syncfusion.Blazor.{{namespace}};

@inherits BaseComponent;
@implements IDisposable;

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    private string _jsNamespace = "{{JSNamespace}}";

    protected override BaseComponent mainParent { get; set; }
    protected override string jsProperty { get; set; } = string.Empty;

    [CascadingParameter]
    internal {{ParentType}} parent { get; set; }

    [CascadingParameter]
    internal {{BaseParentType}} baseParent { get; set; }

    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    public List<{{ComplexType}}> {{PropertyName}} { get; set; } = new List<{{ComplexType}}>();

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string  GetJSNamespace()
    {
        var componentParent = {{CircularParent}}this.parent;
        if(componentParent.GetJSNamespace() == this.baseParent.GetJSNamespace())
        {
            return this._jsNamespace;
        }
        else
        {
            return componentParent.GetJSNamespace() + "." + this._jsNamespace;
        }
    }

    internal int updateChildProperty({{ComplexType}} value)
    {
        this.{{PropertyName}}.Add(value);
        return this.{{PropertyName}}.Count() - 1;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.mainParent = (BaseComponent)this.baseParent;
        var componentParent = {{CircularParent}}this.parent;
        componentParent.updateChildProperties("{{JSNamespace}}", this.{{PropertyName}});
        this.jsProperty = this.GetJSNamespace();
    }

    internal override void ComponentDispose()
    {
        this.mainParent = null;
        this.parent = null;
        this.baseParent = null;
        this.ChildContent = null;
    }
}