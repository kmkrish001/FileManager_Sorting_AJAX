using System;
using System.IO;
using Syncfusion;
using Newtonsoft.Json;
using Microsoft.JSInterop;
using System.ComponentModel;
using Syncfusion.Blazor;
using System.Threading.Tasks;
using System.Linq.Expressions;
using System.Collections.Generic;
using Newtonsoft.Json.Converters;
using System.Collections.ObjectModel;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using Syncfusion.Blazor.{{NameSpace}};

namespace Syncfusion.Blazor.{{NameSpace}}
{
    public partial class {{CommonClassName}}{{GenericType}} : {{BaseComponent}}{{Interface}}
    {
        protected override string nameSpace { get; set; } = "{{JSNameSpace}}";
        protected override string jsProperty { get; set; } = string.Empty;

        [Parameter]
        public override string ID { get; set; }

        [Parameter]
        [JsonIgnore]
        public RenderFragment ChildContent { get; set; }

        {{ModelType}}{{DataAnnotationAttributes}}
        {{Properties}}{{NativeEvent}}{{HtmlAttributes}}{{UpdateChildProperties}}

        [EditorBrowsable(EditorBrowsableState.Never)]
        public string GetJSNamespace()
        {
            return this.nameSpace;
        }

        protected async Task OnHybridInitialized()
        {
            await base.OnInitializedAsync();
            this.jsProperty = this.GetJSNamespace();
            {{InitializeProperties}}
            if (this.ID == null)
            {
                string path = this.nameSpace.Split('.')[1] + System.IO.Path.GetRandomFileName().Replace(".", "");
                this.ID = path;
            }
        }

        protected async Task OnHybridParametersSet()
        {
            await base.OnParametersSetAsync();
            {{SetParameterChanges}}
        }

        protected async Task OnHybridAfterRender(bool firstRender) 
        {
            await base.OnAfterRenderAsync(firstRender);{{AnnotationSettings}}
        }
    }
}