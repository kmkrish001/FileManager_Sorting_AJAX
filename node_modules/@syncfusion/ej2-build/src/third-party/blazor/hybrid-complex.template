using System;
using Newtonsoft.Json;
using System.Collections;
using Syncfusion.Blazor;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Collections.Generic;
using Newtonsoft.Json.Converters;
using Syncfusion.Blazor.{{namespace}};
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;

namespace Syncfusion.Blazor.{{namespace}} 
{
    public partial class {{PartialClass}}{{GenericType}} : BaseComponent{{Interface}}, IDisposable
    {
        private string _jsNamespace = "{{JSNamespace}}";
        private int _sfTagIndex { get; set; } = -1;

        protected override BaseComponent mainParent { get; set; }
        protected override string jsProperty { get; set; } = string.Empty;

        [CascadingParameter]
        internal {{ParentType}} parent { get; set; }

        [CascadingParameter]
        internal {{BaseParentType}} baseParent { get; set; }

        [Parameter]
        [JsonIgnore]
        public RenderFragment ChildContent { get; set; }
        {{TemplateParameter}}

        {{Properties}}{{UpdateChildProperties}}{{InitComplexProperty}}

        [EditorBrowsable(EditorBrowsableState.Never)]
        public string GetJSNamespace()
        {
            string parentJSNamespace = this.parent.GetJSNamespace();
            if (this._sfTagIndex >= 0 && parentJSNamespace != string.Empty)
            {
                return parentJSNamespace + "[" + this._sfTagIndex + "]";
            }
            else if (parentJSNamespace != string.Empty && !parentJSNamespace.StartsWith("sf"))
            {
                return parentJSNamespace + "." + this._jsNamespace;
            }
            else
            {
                return this._jsNamespace;
            }
        }

        protected async Task OnHybridInitialized()
        {
            await base.OnInitializedAsync();
            this.mainParent = (BaseComponent)this.baseParent;{{OnInitContext}}
            this.jsProperty = this.GetJSNamespace();{{OnInitTemplate}}
            {{InitializeProperties}}
        }

        protected async Task OnHybridParametersSet() 
        {
            await base.OnParametersSetAsync();{{InvokeEvents}}
            {{SetParameterChanges}}
        }

        protected async Task OnHybridAfterRender(bool firstRender) 
        {
            await base.OnAfterRenderAsync(firstRender);{{RenderTemplate}}
        }

        internal override void ComponentDispose()
        {
            this.mainParent = null;
            this.parent = null;
            this.baseParent = null;
            this.ChildContent = null;
            {{ComplexDispose}}
        }
    }
}